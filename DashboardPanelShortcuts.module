<?php namespace Daun\Dashboard;

use ProcessWire\AdminThemeFramework;
use ProcessWire\Page;
use ProcessWire\Selectors;
use function ProcessWire\__;
use function ProcessWire\wireIconMarkup;

// Include abstract panel base class
require_once dirname(__DIR__).'/Dashboard/DashboardPanel.class.php';

class DashboardPanelShortcuts extends DashboardPanel
{
    public static function getModuleInfo()
    {
        return array_merge(
            parent::getModuleInfo(),
            [
                'title'    => __('Dashboard Panel: Shortcuts', __FILE__),
                'summary'  => __('Display a list of shortcuts to admin pages', __FILE__),
                'author'   => 'Philipp Daun',
                'version'  => '1.5.2',
            ]
        );
    }

    const displayOptions = [
        'grid',
        'list',
    ];

    const defaultDisplayOption = 'grid';

    public function getIcon()
    {
        return 'flash';
    }

    public function getTitle()
    {
        return $this->_('Shortcuts');
    }

    public function getClassNames()
    {
        return ["{$this}--{$this->display}"];
    }

    public function getContent()
    {
        if (!($this->shortcuts && count($this->shortcuts))) {
            return;
        }

        $links = array_map(function ($shortcut, $key) {
            $info = $this->getShortcutInfo($shortcut, $key);
            $link = $this->renderShortcutLink($info);
            return $link ? "<li>{$link}</li>" : "";
        }, $this->shortcuts, array_keys($this->shortcuts));

        $output = implode('', $links);

        return "<ul data-display='{$this->display}'>{$output}</ul>";
    }

    protected function getShortcutInfo($shortcut, $key = null)
    {
        $page = null;
        $title = null;
        $summary = null;
        $url = null;
        $anchor = null;
        $icon = null;
        $mode = null;

        if (is_array($shortcut) && is_string(array_key_first($shortcut))) {
            // Verbose array with keys passed
            // ['page' => 1020, 'icon' => 'user', 'summary' => 'Edit your profile']
            $page = $shortcut['page'] ?? null;
            $title = $shortcut['title'] ?? null;
            $summary = $shortcut['summary'] ?? null;
            $url = $shortcut['url'] ?? null;
            $anchor = $shortcut['anchor'] ?? null;
            $mode = $shortcut['mode'] ?? null;
            $icon = $shortcut['icon'] ?? null;
        } elseif (is_array($shortcut)) {
            // Simple numerical array passed: Extract shortcut, icon and summary
            // [1020, 'user', 'Edit your profile']
            $summary = $shortcut[2] ?? null;
            $icon = $shortcut[1] ?? null;
            $page = $shortcut[0] ?? null;
        } else {
            // Single page passed
            // 1020
            $page = $shortcut;
        }

        // Get URL if page/id/selector given,
        // otherwise treat as URL string
        if (is_object($page) && $page instanceof Page) {
            $page = $page;
        } elseif (is_int($page)) {
            $page = $this->pages->get($page);
        } elseif (is_string($page)) {
            if (Selectors::stringHasSelector($page)) {
                $page = $this->pages->get($page);
            } else {
                $url = $url ?? $page;
            }
        }

        if (is_object($page) && $this->isPageViewable($page)) {
            $info = $this->getPageInfo($page);
            $title = $title ?? (is_string($key) ? $key : $info->title);
            $summary = $summary ?? $info->summary;
            $icon = $icon ?? $info->icon;
            $url = $page->url;
        } elseif ($url) {
            $title = $title ?? (is_string($key) ? $key : $url);
        } else {
            return;
        }

        return [
            'url' => $url,
            'anchor' => $anchor,
            'mode' => $mode,
            'title' => $title,
            'summary' => $summary,
            'icon' => $icon,
        ];
    }

    protected function renderShortcutLink($link)
    {
        if (!$link || !($link['url'] ?? null)) {
            return '';
        }

        $url = $link['url'] ?? null;
        $isAdminLink = strpos($url, $this->config->urls->admin) === 0;
        $title = $this->sanitizer->entities1($link['title'] ?? $link['url'] ?? '');
        $summary = $this->summaries ? $this->sanitizer->entities1($link['summary'] ?? '') : '';
        $icon = $this->renderPageIcon($link['icon'] ?? null);
        $mode = $link['mode'] ?? (!$isAdminLink ? self::windowModeBlank : '');
        $anchor = $link['anchor'] ?? '';

        $classes = [];
        if ($summary && $this->display === 'grid') {
            $classes[] = 'tooltip';
        }

        $target = '';
        if ($mode === self::windowModeBlank) {
            $target = '_blank';
        } elseif ($mode === self::windowModeModal) {
            $classes[] = 'pw-modal';
            $classes[] = 'pw-modal-large';
        }

        $class = implode(' ', $classes);

        return
            "<a href='{$url}{$anchor}' class='{$class}' title='{$summary}' target='{$target}'>
                <span>
                    {$icon}
                    <span class='title'>{$title}</span>
                </span>
                <span>
                    <span class='summary' title='{$summary}'>{$summary}</span>
                </span>
            </a>";
    }

    protected function renderPageIcon($icon)
    {
        if ($this->icon !== null) {
            $icon = $this->icon;
        }
        $icon = $icon ?: $this->fallbackIcon;

        return $icon ? wireIconMarkup($icon, 'fw') : '';
    }

    protected function getPageInfo($page)
    {
        $adminTheme = $this->wire('adminTheme');
        $hasInfoMethods = ($adminTheme && $adminTheme instanceof AdminThemeFramework);

        $title = '';
        $icon = '';
        $summary = '';

        if ($page->template == 'admin') {
            if ($page->process) {
                $info = $this->modules->getModuleInfoVerbose($page->process);
                $summary = $page->summary ?: ($info['summary'] ?? '');
                $icon = $info['icon'] ?? '';
            }
            $icon = $page->getIcon() ?: $icon;
            $title = $hasInfoMethods ? $adminTheme->getPageTitle($page) : '';
            if (!$icon) {
                switch ($page->id) {
                case 22: $icon = 'gears'; break; // Setup
                case 21: $icon = 'plug'; break; // Modules
                case 28: $icon = 'key'; break; // Access
            }
            }
        }
        if (!$title) {
            $title = $page->get('title|name');
        }
        if (!$icon) {
            $icon = $page->getIcon();
        }

        return (object) compact(
            'title',
            'summary',
            'icon'
        );
    }

    protected function isPageViewable($page)
    {
        if (!($page->url ?? null)) {
            return false;
        }
        if (!$this->checkAccess) {
            return true;
        }
        if ($page->template == 'admin' && !$page->viewable()) {
            return false;
        }

        return true;
    }

    public function setup()
    {
        parent::setup();
        $this->shortcuts = $this->data['shortcuts'] ?? [];
        $this->display = $this->sanitizer->option($this->data['display'] ?? '', self::displayOptions) ?: self::defaultDisplayOption;
        $this->fallbackIcon = $this->data['fallbackIcon'] ?? 'bookmark-o';
        $this->icon = $this->data['icon'] ?? null;
        $this->summaries = $this->data['summaries'] ?? true;
        $this->checkAccess = $this->data['checkAccess'] ?? true;
    }
}
